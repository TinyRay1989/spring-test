<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/security 
      http://www.springframework.org/schema/security/spring-security-4.2.xsd">

  <!-- 静态资源，不用权限 -->
  <security:http pattern="/index.html" security="none" />
  <!-- 当指定一个 http 元素的 security 属性为 none 时，表示其对应 pattern 的 filter 链为空 -->
  <!-- <security:http pattern="/login.html" security="none" /> -->
  <!-- 使用自定义登录页面 -->
  <!-- 自定义登录页面是通过 login-page 属性来指定的。提到 login-page 我们不得不提另外几个属性。
    login-processing-ur:：表示登录时提交的地址，默认是 “/j-spring-security-check”。
    .这个只是 Spring Security 用来标记登录页面使用的提交地址，真正关于登录这个请求是不需要用户自己处理的。
    .所以，我们可以通过如下定义使 Spring Security 在需要用户登录时跳转到我们自定义的登录页面。
    username-parameter:表示登录时用户名使用的是哪个参数，默认是 “j_username”。
    password-parameter:表示登录时密码使用的是哪个参数，默认是 “j_password”。
    default-target-url:用户在直接登录后跳转到指定的页面
    always-use-default-target:如果想让用户不管是直接请求登录页面，
    .还是通过 Spring Security 引导过来的，登录之后都跳转到指定的页面，
    .我们可以通过指定 form-login 元素的 always-use-default-target 属性为 true 来达到这一效果
  -->
  <security:http auto-config="true" use-expressions="false" >
    <security:form-login login-page="/login.html" 
      login-processing-url="/login" 
      username-parameter="username" password-parameter="password"
      authentication-success-handler-ref="authSuccess"
      authentication-failure-handler-ref="authFail"/>
    <!-- 表示匿名用户可以访问 -->
    <security:intercept-url pattern="/login.html" access="ROLE_ANONYMOUS"/>
    <security:intercept-url pattern="/**" access="ROLE_USER" />
    <security:csrf disabled="true"/>
  </security:http>
  <security:authentication-manager>
    <security:authentication-provider>
      <security:user-service>
        <security:user name="user" password="user" authorities="ROLE_USER" />
        <security:user name="admin" password="admin"
          authorities="ROLE_USER, ROLE_ADMIN" />
      </security:user-service>
    </security:authentication-provider>
  </security:authentication-manager>
  <bean name="authSuccess" class="com.test.security.AuthenticationSuccessHandlerImpl"/>
  <bean name="authFail" class="com.test.security.AuthenticationFailureHandlerImpl"/>
</beans>